/*
 * generated by Xtext 2.25.0
 */
package org.rm2pt.sample.atm.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.rm2pt.sample.atm.metamodel.atm.ATM;
import org.rm2pt.sample.atm.metamodel.atm.AtmPackage;
import org.rm2pt.sample.atm.metamodel.atm.Bank;
import org.rm2pt.sample.atm.metamodel.atm.BankCard;
import org.rm2pt.sample.atm.metamodel.atm.BankClerk;
import org.rm2pt.sample.atm.metamodel.atm.Customer;
import org.rm2pt.sample.atm.metamodel.atm.Receipt;
import org.rm2pt.sample.atm.services.DslGrammarAccess;

@SuppressWarnings("all")
public class DslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AtmPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AtmPackage.ATM:
				sequence_ATM(context, (ATM) semanticObject); 
				return; 
			case AtmPackage.BANK:
				sequence_Bank(context, (Bank) semanticObject); 
				return; 
			case AtmPackage.BANK_CARD:
				sequence_BankCard(context, (BankCard) semanticObject); 
				return; 
			case AtmPackage.BANK_CLERK:
				sequence_BankClerk(context, (BankClerk) semanticObject); 
				return; 
			case AtmPackage.CUSTOMER:
				sequence_Customer(context, (Customer) semanticObject); 
				return; 
			case AtmPackage.RECEIPT:
				sequence_Receipt(context, (Receipt) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ATM returns ATM
	 *
	 * Constraint:
	 *     (atmID=EString? address=EString?)
	 */
	protected void sequence_ATM(ISerializationContext context, ATM semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BankCard returns BankCard
	 *
	 * Constraint:
	 *     (
	 *         cardID=EString 
	 *         balance=EString? 
	 *         catalog=CardCatalog? 
	 *         password=EString? 
	 *         card2bank=[Bank|EString]? 
	 *         bc2customer=[Customer|EString]?
	 *     )
	 */
	protected void sequence_BankCard(ISerializationContext context, BankCard semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BankClerk returns BankClerk
	 *
	 * Constraint:
	 *     (
	 *         userID=EString 
	 *         name=EString? 
	 *         address=EString? 
	 *         age=EString? 
	 *         phone=EString? 
	 *         Post=EString? 
	 *         pin=EString? 
	 *         uesr2bank=[Bank|EString]? 
	 *         atmUser=[ATM|EString]?
	 *     )
	 */
	protected void sequence_BankClerk(ISerializationContext context, BankClerk semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Bank returns Bank
	 *
	 * Constraint:
	 *     (bankName=EString? address=EString? atmFrom+=ATM atmFrom+=ATM*)
	 */
	protected void sequence_Bank(ISerializationContext context, Bank semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Customer returns Customer
	 *
	 * Constraint:
	 *     (
	 *         userID=EString 
	 *         name=EString? 
	 *         address=EString? 
	 *         age=EString? 
	 *         phone=EString? 
	 *         uesr2bank=[Bank|EString]? 
	 *         atmUser=[ATM|EString]?
	 *     )
	 */
	protected void sequence_Customer(ISerializationContext context, Customer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Receipt returns Receipt
	 *
	 * Constraint:
	 *     (
	 *         time=EString? 
	 *         operationName=EString? 
	 *         balanceChanged=EString? 
	 *         balanceRemain=EString? 
	 *         bank=[Bank|EString]? 
	 *         atm=[ATM|EString]? 
	 *         bankcard=[BankCard|EString]? 
	 *         r2customer=[Customer|EString]?
	 *     )
	 */
	protected void sequence_Receipt(ISerializationContext context, Receipt semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
